#define _CRT_SECURE_NO_WARNINGS
#include <windows.h>
#include <stdio.h>
#include <string.h>
#include <tchar.h>
#include <fstream>
#include <ctime>
#include <iostream>


#define SERVICE_NAME TEXT("myservice")

SERVICE_STATUS          g_ServiceStatus = { 0 };
SERVICE_STATUS_HANDLE   g_StatusHandle = NULL;
HANDLE                  g_ServiceStopEvent = INVALID_HANDLE_VALUE;

void WINAPI ServiceMain(int argc, char** argv);
void WINAPI ServiceHandler(DWORD CtrlCode);
DWORD WINAPI ServiceWorkerThread(LPVOID lpParam);
BOOL IsInstalled();
BOOL Install();
BOOL Uninstall();
void LogEvent(LPCTSTR pszFormat);

BOOL Install()
{
    if (IsInstalled())
        return TRUE;

    //打开服务控制管理器
    SC_HANDLE hSCM = ::OpenSCManager(NULL, NULL, SC_MANAGER_ALL_ACCESS);
    if (hSCM == NULL)
    {
    }

    // Get the executable file path
    TCHAR szFilePath[MAX_PATH];
    ::GetModuleFileName(NULL, szFilePath, MAX_PATH);

    SC_HANDLE hService = ::CreateService(
        hSCM, SERVICE_NAME, SERVICE_NAME,
        SERVICE_ALL_ACCESS, SERVICE_WIN32_OWN_PROCESS,
        SERVICE_DEMAND_START, SERVICE_ERROR_NORMAL,
        szFilePath, NULL, NULL, _T(""), NULL, NULL);

    if (hService == NULL)
    {
        return false;
    }

    ::CloseServiceHandle(hService);
    ::CloseServiceHandle(hSCM);
    return TRUE;
}

BOOL Uninstall()
{
    if (!IsInstalled())
        return TRUE;

    SC_HANDLE hSCM = ::OpenSCManager(NULL, NULL, SC_MANAGER_ALL_ACCESS);

    if (hSCM == NULL)
    {

    }

    SC_HANDLE hService = ::OpenService(hSCM, SERVICE_NAME, SERVICE_STOP | DELETE);

    if (hService == NULL)
    {
        ::CloseServiceHandle(hSCM);

    }
    SERVICE_STATUS status;
    ::ControlService(hService, SERVICE_CONTROL_STOP, &status);

    BOOL bDelete = ::DeleteService(hService);
    ::CloseServiceHandle(hService);
    ::CloseServiceHandle(hSCM);

    if (bDelete)
        return TRUE;

    LogEvent(_T("Service could not be deleted"));
    return FALSE;
}

BOOL IsInstalled()
{
    BOOL bResult = FALSE;

    //打开服务控制管理器
    SC_HANDLE hSCM = ::OpenSCManager(NULL, NULL, SC_MANAGER_ALL_ACCESS);

    if (hSCM != NULL)
    {
        //打开服务
        SC_HANDLE hService = ::OpenService(hSCM, SERVICE_NAME, SERVICE_QUERY_CONFIG);
        if (hService != NULL)
        {
            bResult = TRUE;
            ::CloseServiceHandle(hService);
        }
        ::CloseServiceHandle(hSCM);
    }
    return bResult;
}

void LogEvent(LPCTSTR pFormat)
{
    HANDLE hEventSource;
    hEventSource = RegisterEventSource(NULL, SERVICE_NAME);
    if (hEventSource != NULL)
    {
        ReportEvent(hEventSource, EVENTLOG_INFORMATION_TYPE, 0, 0, NULL, 1, 0, &pFormat, NULL);
        DeregisterEventSource(hEventSource);
    }
}

DWORD WINAPI ServiceWorkerThread(LPVOID lpParam)
{

    //std::ofstream ofs;
    //int i = 0;
    //time_t curtime;
    //time(&curtime);
    //ofs.open("D:/test.txt", std::ios::app | std::ios::out);
    while (WaitForSingleObject(g_ServiceStopEvent, 0) != WAIT_OBJECT_0)
    {
        //// do-your-jobs-here

        //Sleep(3000);
        //time(&curtime);



        //ofs << ctime(&curtime) << "\n" << std::endl;

        //i++;
        int result = 1 + 1;

        Sleep(300);
        LogEvent(L"the result is 2");
    }

    //ofs.close();
    return NULL;
}

void WINAPI ServiceHandler(DWORD CtrlCode)
{


    switch (CtrlCode)
    {
    case SERVICE_CONTROL_STOP:
    case SERVICE_CONTROL_SHUTDOWN:
        g_ServiceStatus.dwControlsAccepted = 0;
        g_ServiceStatus.dwCurrentState = SERVICE_STOP_PENDING;
        g_ServiceStatus.dwWin32ExitCode = 0;
        g_ServiceStatus.dwCheckPoint = 4;
        if (SetServiceStatus(g_StatusHandle, &g_ServiceStatus) == FALSE)
        {
            return;
        }
        LogEvent(L"The service is stopped");
        SetEvent(g_ServiceStopEvent); // This will signal the worker thread to start shutting down

        break;
    default:
        break;
    }


}


void WINAPI ServiceMain(int argc, char** argv)
{


    g_StatusHandle = RegisterServiceCtrlHandler((SERVICE_NAME), ServiceHandler);
    if (g_StatusHandle == NULL)
    {

        return;
    }

    ZeroMemory(&g_ServiceStatus, sizeof(g_ServiceStatus));
    g_ServiceStatus.dwServiceType = SERVICE_WIN32;
    g_ServiceStatus.dwControlsAccepted = 0;
    g_ServiceStatus.dwCurrentState = SERVICE_START_PENDING;
    g_ServiceStatus.dwWin32ExitCode = 0;
    g_ServiceStatus.dwServiceSpecificExitCode = 0;
    g_ServiceStatus.dwCheckPoint = 0;
    g_ServiceStatus.dwWaitHint = 0;
    if (SetServiceStatus(g_StatusHandle, &g_ServiceStatus) == FALSE)
    {

        return;
    }

    // Create stop event to wait on later.
    g_ServiceStopEvent = CreateEvent(NULL, TRUE, FALSE, NULL);
    if (g_ServiceStopEvent == NULL)
    {
        g_ServiceStatus.dwControlsAccepted = 0;
        g_ServiceStatus.dwCurrentState = SERVICE_STOPPED;
        g_ServiceStatus.dwWin32ExitCode = GetLastError();
        g_ServiceStatus.dwCheckPoint = 1;
        SetServiceStatus(g_StatusHandle, &g_ServiceStatus);
        return;
    }

    g_ServiceStatus.dwControlsAccepted = SERVICE_ACCEPT_STOP | SERVICE_ACCEPT_SHUTDOWN | SERVICE_ACCEPT_PAUSE_CONTINUE;
    g_ServiceStatus.dwCurrentState = SERVICE_RUNNING;
    g_ServiceStatus.dwWin32ExitCode = 0;
    g_ServiceStatus.dwCheckPoint = 0;
    g_ServiceStatus.dwWaitHint = 9000;
    if (SetServiceStatus(g_StatusHandle, &g_ServiceStatus) == FALSE)
    {

        return;
    }

    // Start the thread that will perform the main task of the service
    HANDLE hThread = CreateThread(NULL, NULL, ServiceWorkerThread, NULL, NULL, NULL);
    if (hThread == NULL)
    {

    }
    // Wait until our worker thread exits effectively signaling that the service needs to stop
    WaitForSingleObject(hThread, INFINITE);

    // clean up
    CloseHandle(g_ServiceStopEvent);

    g_ServiceStatus.dwControlsAccepted = 0;
    g_ServiceStatus.dwCurrentState = SERVICE_STOPPED;
    g_ServiceStatus.dwWin32ExitCode = 0;
    g_ServiceStatus.dwCheckPoint = 3;
    if (SetServiceStatus(g_StatusHandle, &g_ServiceStatus) == FALSE)
    {

        return;
    }

    return;
}

int main(int argc, const char* argv[])
{
    SERVICE_TABLE_ENTRY ServiceTable[] =
    {
        {(LPWSTR)SERVICE_NAME, (LPSERVICE_MAIN_FUNCTION)ServiceMain},
        {NULL, NULL}
    };

    if (argc > 1) {
        if (strcmp(argv[1], "/install") == 0)
        {
            std::cout << "The service start to install" << std::endl;
            if (Install()) {
                std::cout << "\n success" << std::endl;
            }
            else {
                std::cout << "\n fail" << std::endl;
            };
            return 0;
        }
        else if (strcmp(argv[1], "/uninstall") == 0)
        {
            if (Uninstall()) {
                std::cout << "The service has been uninstalled" << std::endl;
            };
            return 0;
        }
    }

    if (StartServiceCtrlDispatcher(ServiceTable) == FALSE)
    {

        LogEvent(_T("The service fails to start"));
    }

    return 0;
}
